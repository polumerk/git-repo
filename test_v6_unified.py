#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Hello World v6.0 Unified - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import json
import time

def test_ai_chatbot():
    """–¢–µ—Å—Ç AI —á–∞—Ç-–±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç-–±–æ—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏–∑ unified —Ñ–∞–π–ª–∞
        from hello_world_v6_unified import AILanguageBot
        
        bot = AILanguageBot()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = bot.create_learning_session('test_user', 'ru', 'beginner')
        print(f"   ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session['target_language']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        messages = ['–ü—Ä–∏–≤–µ—Ç!', '–°–ø–∞—Å–∏–±–æ!', '–ü–æ–º–æ—â—å']
        for msg in messages:
            response = bot.process_message('test_user', msg)
            print(f"   üë§ {msg} ‚Üí ü§ñ {response['response'][:50]}...")
            if response.get('suggestions'):
                print(f"      üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(response['suggestions'][:3])}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = bot.get_session_statistics('test_user')
        print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['user_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π, {stats['progress_score']} –æ—á–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_oauth_service():
    """–¢–µ—Å—Ç OAuth —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from hello_world_v6_unified import OAuthService
        
        oauth = OAuthService()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers = oauth.get_supported_providers()
        print(f"   üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(providers)}")
        
        # –¢–µ—Å—Ç mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_result = oauth.create_mock_user('demo', {
            'email': 'test@demo.com',
            'name': 'Test User'
        })
        
        print(f"   ‚úÖ Mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {mock_result['user']['name']}")
        print(f"   üîë JWT —Ç–æ–∫–µ–Ω: {mock_result['jwt_token'][:20]}...")
        
        # –¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
        payload = oauth.verify_jwt_token(mock_result['jwt_token'])
        print(f"   ‚úÖ –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {payload['user_id'] if payload else '–û—à–∏–±–∫–∞'}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_graphql_service():
    """–¢–µ—Å—Ç GraphQL —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GraphQL —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from hello_world_v6_unified import GraphQLService
        
        graphql = GraphQLService()
        
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        result = graphql.execute_query('query { hello }')
        print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {result['data']['message'][:50]}...")
        
        # –¢–µ—Å—Ç —Å—Ö–µ–º—ã
        schema = graphql.get_schema_sdl()
        print(f"   üìÑ –°—Ö–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(schema)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_hello_world_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    print("\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Hello World...")
    
    try:
        from hello_world_v6_unified import greeter
        
        # –¢–µ—Å—Ç —è–∑—ã–∫–æ–≤
        languages = greeter.available_languages()
        print(f"   üó£Ô∏è  –î–æ—Å—Ç—É–ø–Ω–æ —è–∑—ã–∫–æ–≤: {len(languages)}")
        
        # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        test_langs = ['ru', 'en', 'es']
        for lang in test_langs:
            if lang in languages:
                info = greeter.get_language_info(lang)
                print(f"   {lang}: {info['greeting']}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_api_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüåê –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    try:
        from hello_world_v6_unified import app
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
        with app.test_client() as client:
            
            # –¢–µ—Å—Ç /api/languages
            response = client.get('/api/languages')
            if response.status_code == 200:
                data = json.loads(response.data)
                print(f"   ‚úÖ /api/languages: {data['total']} —è–∑—ã–∫–æ–≤")
            else:
                print(f"   ‚ùå /api/languages: {response.status_code}")
            
            # –¢–µ—Å—Ç /api/system/status
            response = client.get('/api/system/status')
            if response.status_code == 200:
                data = json.loads(response.data)
                print(f"   ‚úÖ /api/system/status: –≤–µ—Ä—Å–∏—è {data['version']}")
                print(f"      üîß –°–µ—Ä–≤–∏—Å—ã: {sum(1 for v in data['services'].values() if v)}/{len(data['services'])} –∞–∫—Ç–∏–≤–Ω—ã")
            else:
                print(f"   ‚ùå /api/system/status: {response.status_code}")
            
            # –¢–µ—Å—Ç AI API
            ai_session_data = {
                'user_id': 'test_api_user',
                'target_language': 'ru',
                'level': 'beginner'
            }
            
            response = client.post('/api/ai/session', 
                                 json=ai_session_data,
                                 content_type='application/json')
            if response.status_code == 200:
                print(f"   ‚úÖ /api/ai/session: —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
                
                # –¢–µ—Å—Ç AI —á–∞—Ç–∞
                chat_data = {
                    'user_id': 'test_api_user',
                    'message': '–ü—Ä–∏–≤–µ—Ç!'
                }
                
                response = client.post('/api/ai/chat',
                                     json=chat_data,
                                     content_type='application/json')
                if response.status_code == 200:
                    data = json.loads(response.data)
                    print(f"   ‚úÖ /api/ai/chat: {data['response'][:50]}...")
                else:
                    print(f"   ‚ùå /api/ai/chat: {response.status_code}")
            else:
                print(f"   ‚ùå /api/ai/session: {response.status_code}")
            
            # –¢–µ—Å—Ç GraphQL API
            graphql_data = {
                'query': 'query { hello }'
            }
            
            response = client.post('/api/graphql',
                                 json=graphql_data,
                                 content_type='application/json')
            if response.status_code == 200:
                data = json.loads(response.data)
                print(f"   ‚úÖ /api/graphql: {data['data']['message'][:50]}...")
            else:
                print(f"   ‚ùå /api/graphql: {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HELLO WORLD v6.0 - AI EDITION (UNIFIED)")
    print("=" * 70)
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("AI Chatbot", test_ai_chatbot),
        ("OAuth Service", test_oauth_service),
        ("GraphQL Service", test_graphql_service),
        ("Hello World Integration", test_hello_world_integration),
        ("API Simulation", test_api_simulation)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            if result:
                passed += 1
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
    
    # –ò—Ç–æ–≥–∏
    elapsed = time.time() - start_time
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   Hello World v6.0 - AI Edition –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
    
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print("   python3 hello_world_v6_unified.py")
    print("   –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5000")
    
    print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("   pip install flask-socketio flask-cors PyJWT")


if __name__ == '__main__':
    main()