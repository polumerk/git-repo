#!/usr/bin/env python3
"""
AI —á–∞—Ç-–±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
"""

import os
import json
import time
import random
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger.warning("OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º.")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥—Ä—É–≥–∏—Ö AI –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False

@dataclass
class ChatMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    role: str  # 'user', 'assistant', 'system'
    content: str
    timestamp: float
    language: Optional[str] = None
    confidence: Optional[float] = None

@dataclass
class LearningSession:
    """–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    user_id: str
    target_language: str
    native_language: str
    level: str  # 'beginner', 'intermediate', 'advanced'
    messages: List[ChatMessage]
    created_at: float
    last_activity: float
    topics_covered: List[str]
    progress_score: int = 0

class AILanguageBot:
    """AI —á–∞—Ç-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤"""
    
    def __init__(self):
        self.openai_client = None
        self.sessions: Dict[str, LearningSession] = {}
        self.setup_ai_clients()
        
        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —É—Ä–æ–∫–∏
        self.language_lessons = {
            'ru': {
                'greetings': ['–ü—Ä–∏–≤–µ—Ç!', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'],
                'basics': ['–ö–∞–∫ –¥–µ–ª–∞?', '–ú–µ–Ω—è –∑–æ–≤—É—Ç...', '–û—Ç–∫—É–¥–∞ –≤—ã?'],
                'phrases': ['–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞', '–ò–∑–≤–∏–Ω–∏—Ç–µ']
            },
            'en': {
                'greetings': ['Hello!', 'Hi there!', 'Welcome!'],
                'basics': ['How are you?', 'My name is...', 'Where are you from?'],
                'phrases': ['Thank you very much', 'You\'re welcome', 'Excuse me']
            },
            'es': {
                'greetings': ['¬°Hola!', '¬°Buenos d√≠as!', '¬°Bienvenido!'],
                'basics': ['¬øC√≥mo est√°s?', 'Me llamo...', '¬øDe d√≥nde eres?'],
                'phrases': ['Muchas gracias', 'De nada', 'Disculpe']
            },
            'fr': {
                'greetings': ['Bonjour!', 'Salut!', 'Bienvenue!'],
                'basics': ['Comment allez-vous?', 'Je m\'appelle...', 'D\'o√π venez-vous?'],
                'phrases': ['Merci beaucoup', 'De rien', 'Excusez-moi']
            }
        }
        
        self.conversation_starters = {
            'beginner': [
                "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π! –°–∫–∞–∂–∏—Ç–µ '–ø—Ä–∏–≤–µ—Ç' –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ.",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ!",
                "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—Å–ø–∞—Å–∏–±–æ' –Ω–∞ —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏–∑—É—á–∞–µ—Ç–µ?"
            ],
            'intermediate': [
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –¥–Ω–µ –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ.",
                "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ª—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
                "–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"
            ],
            'advanced': [
                "–û–±—Å—É–¥–∏–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ.",
                "–ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?",
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã —á–∏—Ç–∞–ª–∏."
            ]
        }
    
    def setup_ai_clients(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        if OPENAI_AVAILABLE:
            api_key = os.getenv('OPENAI_API_KEY')
            if api_key:
                try:
                    openai.api_key = api_key
                    self.openai_client = openai
                    logger.info("OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI: {e}")
            else:
                logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
    
    def create_learning_session(self, user_id: str, target_language: str, 
                              native_language: str = 'ru', level: str = 'beginner') -> LearningSession:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–∑—É—á–µ–Ω–∏—è"""
        session = LearningSession(
            user_id=user_id,
            target_language=target_language,
            native_language=native_language,
            level=level,
            messages=[],
            created_at=time.time(),
            last_activity=time.time(),
            topics_covered=[]
        )
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
        welcome_msg = self._generate_welcome_message(target_language, level)
        session.messages.append(ChatMessage(
            role='assistant',
            content=welcome_msg,
            timestamp=time.time(),
            language=target_language
        ))
        
        self.sessions[user_id] = session
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è {target_language} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return session
    
    def _generate_welcome_message(self, target_language: str, level: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_templates = {
            'ru': {
                'beginner': "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—Ä–∞–∑!",
                'intermediate': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤—ã –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫? –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏!",
                'advanced': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            },
            'en': {
                'beginner': "Hello! üëã I'm your AI assistant for learning English. Let's start with simple phrases!",
                'intermediate': "Hi there! Ready to practice English? Let's try more complex conversations!",
                'advanced': "Welcome! Let's discuss interesting topics in English."
            },
            'es': {
                'beginner': "¬°Hola! üëã Soy tu asistente AI para aprender espa√±ol. ¬°Empecemos con frases simples!",
                'intermediate': "¬°Hola! ¬øListo para practicar espa√±ol? ¬°Intentemos conversaciones m√°s complejas!",
                'advanced': "¬°Bienvenido! Discutamos temas interesantes en espa√±ol."
            }
        }
        
        return welcome_templates.get(target_language, {}).get(level, 
            f"Welcome to your {target_language} learning session!")
    
    def process_message(self, user_id: str, message: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.sessions:
            return {'error': 'Session not found. Please start a new learning session.'}
        
        session = self.sessions[user_id]
        session.last_activity = time.time()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_msg = ChatMessage(
            role='user',
            content=message,
            timestamp=time.time()
        )
        session.messages.append(user_msg)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        try:
            response = self._generate_response(session, message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            bot_msg = ChatMessage(
                role='assistant',
                content=response['content'],
                timestamp=time.time(),
                language=session.target_language,
                confidence=response.get('confidence', 0.8)
            )
            session.messages.append(bot_msg)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            session.progress_score += response.get('progress_points', 1)
            
            return {
                'response': response['content'],
                'confidence': response.get('confidence', 0.8),
                'suggestions': response.get('suggestions', []),
                'corrections': response.get('corrections', []),
                'progress_score': session.progress_score,
                'next_topic': response.get('next_topic')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                'response': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                'error': str(e)
            }
    
    def _generate_response(self, session: LearningSession, user_message: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenAI
        if self.openai_client:
            try:
                return self._generate_openai_response(session, user_message)
            except Exception as e:
                logger.warning(f"OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        return self._generate_fallback_response(session, user_message)
    
    def _generate_openai_response(self, session: LearningSession, user_message: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        system_prompt = f"""
        –í—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è {session.target_language} —è–∑—ã–∫–∞.
        –£—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞: {session.level}
        –†–æ–¥–Ω–æ–π —è–∑—ã–∫: {session.native_language}
        
        –í–∞—à–∏ –∑–∞–¥–∞—á–∏:
        1. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ {session.target_language} —è–∑—ã–∫–µ (—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        2. –ò—Å–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—à–∏–±–∫–∏ –º—è–≥–∫–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ
        3. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
        4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é —É—á–µ–Ω–∏–∫–∞
        5. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: JSON —Å –ø–æ–ª—è–º–∏: content, suggestions, corrections, confidence, progress_points
        """
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_message}
        ]
        
        try:
            response = self.openai_client.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
            try:
                parsed_response = json.loads(ai_response)
                return parsed_response
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                return {
                    'content': ai_response,
                    'confidence': 0.9,
                    'progress_points': 2
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            raise
    
    def _generate_fallback_response(self, session: LearningSession, user_message: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å fallback –æ—Ç–≤–µ—Ç –±–µ–∑ AI"""
        
        target_lang = session.target_language
        level = session.level
        message_lower = user_message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hola', 'bonjour']):
            responses = {
                'ru': "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å '–ö–∞–∫ –¥–µ–ª–∞?' - '–ö–∞–∫ –¥–µ–ª–∞?'",
                'en': "Great! You said hello. Now try asking 'How are you?' - 'How are you?'",
                'es': "¬°Excelente! Dijiste hola. Ahora intenta preguntar '¬øC√≥mo est√°s?' - '¬øC√≥mo est√°s?'",
                'fr': "Parfait! Vous avez dit bonjour. Maintenant essayez de demander 'Comment allez-vous?'"
            }
            
            return {
                'content': responses.get(target_lang, "Good! Now let's learn more phrases."),
                'suggestions': self.language_lessons.get(target_lang, {}).get('basics', []),
                'confidence': 0.8,
                'progress_points': 1
            }
        
        elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', 'thank', 'gracias', 'merci']):
            responses = {
                'ru': "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í—ã —Å–∫–∞–∑–∞–ª–∏ '—Å–ø–∞—Å–∏–±–æ'. –û—Ç–≤–µ—Ç: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!' –∏–ª–∏ '–ù–µ –∑–∞ —á—Ç–æ!'",
                'en': "Perfect! You said 'thank you'. Response: 'You're welcome!' or 'No problem!'",
                'es': "¬°Perfecto! Dijiste 'gracias'. Respuesta: '¬°De nada!' o '¬°No hay de qu√©!'",
                'fr': "Parfait! Vous avez dit 'merci'. R√©ponse: 'De rien!' ou 'Je vous en prie!'"
            }
            
            return {
                'content': responses.get(target_lang, "Good! You're learning polite expressions."),
                'suggestions': self.language_lessons.get(target_lang, {}).get('phrases', []),
                'confidence': 0.8,
                'progress_points': 1
            }
        
        elif any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', 'ayuda', 'aide']):
            help_responses = {
                'ru': """
                –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
                üìö –û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã–º —Ñ—Ä–∞–∑–∞–º
                ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫  
                üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
                üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å
                
                –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å!
                """,
                'en': """
                I'll help you learn English! Here's what I can do:
                üìö Teaching basic phrases
                ‚úÖ Correcting mistakes
                üí° Suggesting new words
                üéØ Adapting to your level
                
                Just write to me in English, and I'll help you improve!
                """
            }
            
            return {
                'content': help_responses.get(target_lang, "I'm here to help you learn! Just start talking to me."),
                'confidence': 1.0,
                'progress_points': 0
            }
        
        else:
            # –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π —Ç–µ–º—ã
            starters = self.conversation_starters.get(level, self.conversation_starters['beginner'])
            random_starter = random.choice(starters)
            
            responses = {
                'ru': f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ: {random_starter}",
                'en': f"Interesting! Let's try something new: {random_starter}",
                'es': f"¬°Interesante! Probemos algo nuevo: {random_starter}",
                'fr': f"Int√©ressant! Essayons quelque chose de nouveau: {random_starter}"
            }
            
            return {
                'content': responses.get(target_lang, f"Let's try: {random_starter}"),
                'suggestions': self._get_random_suggestions(target_lang),
                'confidence': 0.6,
                'progress_points': 1,
                'next_topic': random_starter
            }
    
    def _get_random_suggestions(self, language: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —è–∑—ã–∫–∞"""
        lessons = self.language_lessons.get(language, {})
        all_phrases = []
        for category in lessons.values():
            all_phrases.extend(category)
        
        return random.sample(all_phrases, min(3, len(all_phrases)))
    
    def get_session_statistics(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        if user_id not in self.sessions:
            return {'error': 'Session not found'}
        
        session = self.sessions[user_id]
        
        total_messages = len(session.messages)
        user_messages = len([m for m in session.messages if m.role == 'user'])
        session_duration = time.time() - session.created_at
        
        return {
            'user_id': user_id,
            'target_language': session.target_language,
            'level': session.level,
            'progress_score': session.progress_score,
            'total_messages': total_messages,
            'user_messages': user_messages,
            'session_duration_minutes': round(session_duration / 60, 1),
            'topics_covered': session.topics_covered,
            'last_activity': session.last_activity,
            'messages_per_minute': round(user_messages / (session_duration / 60), 2) if session_duration > 60 else 0
        }
    
    def get_learning_progress(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è"""
        if user_id not in self.sessions:
            return {'error': 'Session not found'}
        
        session = self.sessions[user_id]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        level_thresholds = {'beginner': 50, 'intermediate': 100, 'advanced': 200}
        current_threshold = level_thresholds.get(session.level, 50)
        
        progress_percentage = min(100, (session.progress_score / current_threshold) * 100)
        
        return {
            'current_level': session.level,
            'progress_score': session.progress_score,
            'progress_percentage': round(progress_percentage, 1),
            'next_level_threshold': current_threshold,
            'can_level_up': session.progress_score >= current_threshold,
            'achievements': self._get_achievements(session),
            'recommendations': self._get_recommendations(session)
        }
    
    def _get_achievements(self, session: LearningSession) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        achievements = []
        
        if session.progress_score >= 10:
            achievements.append("üéØ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ - 10 –æ—á–∫–æ–≤!")
        if session.progress_score >= 25:
            achievements.append("üî• –ù–∞ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ - 25 –æ—á–∫–æ–≤!")
        if session.progress_score >= 50:
            achievements.append("‚≠ê –£–≤–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç - 50 –æ—á–∫–æ–≤!")
        if len(session.messages) >= 20:
            achievements.append("üí¨ –ë–æ–ª—Ç—É–Ω - 20 —Å–æ–æ–±—â–µ–Ω–∏–π!")
        if len(set(session.topics_covered)) >= 3:
            achievements.append("üåü –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å - 3 —Ç–µ–º—ã!")
        
        return achievements
    
    def _get_recommendations(self, session: LearningSession) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
        recommendations = []
        
        if session.progress_score < 20:
            recommendations.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –Ω–∞—á–∞–ª–∞")
        elif session.progress_score < 50:
            recommendations.append("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º")
        else:
            recommendations.append("–í—ã –¥–µ–ª–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ø–µ—Ö–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–µ–º—ã")
        
        if len(session.messages) < 10:
            recommendations.append("–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —á–∞—â–µ - —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞!")
        
        return recommendations
    
    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π"""
        current_time = time.time()
        cutoff_time = current_time - (max_age_hours * 3600)
        
        old_sessions = [
            user_id for user_id, session in self.sessions.items()
            if session.last_activity < cutoff_time
        ]
        
        for user_id in old_sessions:
            del self.sessions[user_id]
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return len(old_sessions)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
language_bot = AILanguageBot()


if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –±–æ—Ç–∞
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —á–∞—Ç-–±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    bot = AILanguageBot()
    session = bot.create_learning_session('test_user', 'ru', 'en', 'beginner')
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    test_messages = [
        "Hello!",
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!",
        "–ø–æ–º–æ—â—å"
    ]
    
    print("\nüí¨ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥:")
    for msg in test_messages:
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}")
        response = bot.process_message('test_user', msg)
        print(f"ü§ñ –ë–æ—Ç: {response['response']}")
        
        if 'suggestions' in response and response['suggestions']:
            print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {', '.join(response['suggestions'])}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
    stats = bot.get_session_statistics('test_user')
    for key, value in stats.items():
        if key != 'error':
            print(f"   {key}: {value}")
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è
    print("\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è:")
    progress = bot.get_learning_progress('test_user')
    for key, value in progress.items():
        if key != 'error':
            print(f"   {key}: {value}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")