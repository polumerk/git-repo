#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤
"""

import sys
import time
from typing import Dict, List, Optional


class WorldGreeter:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –º–∏—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
    
    def __init__(self):
        self.greetings = {
            'ru': '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!',
            'en': 'Hello, World!',
            'es': 'Hola, Mundo!',
            'fr': 'Bonjour, le monde!',
            'de': 'Hallo, Welt!',
            'it': 'Ciao, mondo!',
            'ja': '„Åì„Çì„Å´„Å°„ÅØ„ÄÅ‰∏ñÁïåÔºÅ',
            'zh': '‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ',
            'ar': 'ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ!',
            'hi': '‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ!',
            'pt': 'Ol√°, Mundo!',
            'ko': 'ÏïàÎÖïÌïòÏÑ∏Ïöî, ÏÑ∏Í≥Ñ!',
            'tr': 'Merhaba, D√ºnya!',
            'pl': 'Witaj, ≈õwiecie!',
            'nl': 'Hallo, wereld!',
            'sv': 'Hej, v√§rlden!',
            'no': 'Hei, verden!',
            'fi': 'Hei, maailma!',
            'da': 'Hej, verden!',
            'cs': 'Ahoj, svƒõte!',
            'hu': 'Hell√≥, vil√°g!',
            'ro': 'Salut, lume!',
            'bg': '–ó–¥—Ä–∞–≤–µ–π, —Å–≤—è—Ç!',
            'hr': 'Pozdrav, svijete!',
            'sk': 'Ahoj, svet!',
            'sl': 'Pozdravljen, svet!',
            'et': 'Tere, maailm!',
            'lv': 'Sveika, pasaule!',
            'lt': 'Labas, pasauli!',
            'mt': 'Hello, dinja!'
        }
        
        self.language_names = {
            'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English', 'es': 'Espa√±ol', 'fr': 'Fran√ßais',
            'de': 'Deutsch', 'it': 'Italiano', 'ja': 'Êó•Êú¨Ë™û', 'zh': '‰∏≠Êñá',
            'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', 'hi': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', 'pt': 'Portugu√™s', 'ko': 'ÌïúÍµ≠Ïñ¥',
            'tr': 'T√ºrk√ße', 'pl': 'Polski', 'nl': 'Nederlands', 'sv': 'Svenska',
            'no': 'Norsk', 'fi': 'Suomi', 'da': 'Dansk', 'cs': 'ƒåe≈°tina',
            'hu': 'Magyar', 'ro': 'Rom√¢nƒÉ', 'bg': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏', 'hr': 'Hrvatski',
            'sk': 'Slovenƒçina', 'sl': 'Sloven≈°ƒçina', 'et': 'Eesti', 'lv': 'Latvie≈°u',
            'lt': 'Lietuvi≈≥', 'mt': 'Malti'
        }
    
    def greet(self, language: str = 'en') -> str:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        return self.greetings.get(language, self.greetings['en'])
    
    def greet_all(self) -> None:
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        print("üåç === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏—Ä–∞ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö ===")
        for i, (lang, greeting) in enumerate(self.greetings.items(), 1):
            lang_name = self.language_names.get(lang, lang.upper())
            print(f"{i:2d}. {lang.upper()}: {greeting} ({lang_name})")
            if i % 5 == 0:  # –ü–∞—É–∑–∞ –∫–∞–∂–¥—ã–µ 5 —è–∑—ã–∫–æ–≤
                time.sleep(0.5)
    
    def available_languages(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        return list(self.greetings.keys())
    
    def get_language_info(self, language: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ"""
        return {
            'code': language,
            'name': self.language_names.get(language, language.upper()),
            'greeting': self.greetings.get(language, 'Unknown')
        }
    
    def search_language(self, query: str) -> List[str]:
        """–ü–æ–∏—Å–∫ —è–∑—ã–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É"""
        query = query.lower()
        matches = []
        
        for code, name in self.language_names.items():
            if (query in code.lower() or 
                query in name.lower() or 
                query in self.greetings[code].lower()):
                matches.append(code)
        
        return matches


def print_menu() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\n" + "="*50)
    print("üåç –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ú–ò–†–ê")
    print("="*50)
    print("1. üëã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —è–∑—ã–∫–∏")
    print("2. üéØ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫")
    print("3. üîç –ù–∞–π—Ç–∏ —è–∑—ã–∫")
    print("4. üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    print("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("6. ‚ùì –°–ø—Ä–∞–≤–∫–∞")
    print("0. üö™ –í—ã—Ö–æ–¥")
    print("="*50)


def interactive_language_selection(greeter: WorldGreeter) -> None:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    languages = greeter.available_languages()
    
    print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω–æ {len(languages)} —è–∑—ã–∫–æ–≤:")
    print("-" * 40)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —è–∑—ã–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    for i in range(0, len(languages), 3):
        row = []
        for j in range(3):
            if i + j < len(languages):
                lang = languages[i + j]
                name = greeter.language_names.get(lang, lang.upper())
                row.append(f"{lang:3s} - {name:15s}")
        print("  ".join(row))
    
    print("-" * 40)
    
    while True:
        choice = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ (–∏–ª–∏ 'menu' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞): ").strip().lower()
        
        if choice == 'menu':
            break
        elif choice in languages:
            info = greeter.get_language_info(choice)
            print(f"\nüéâ {info['greeting']}")
            print(f"üìù –Ø–∑—ã–∫: {info['name']} ({info['code'].upper()})")
        else:
            print(f"‚ùå –Ø–∑—ã–∫ '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def search_languages(greeter: WorldGreeter) -> None:
    """–ü–æ–∏—Å–∫ —è–∑—ã–∫–æ–≤"""
    query = input("\nüîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
    
    if not query:
        print("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å!")
        return
    
    matches = greeter.search_language(query)
    
    if matches:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è '{query}':")
        for lang in matches:
            info = greeter.get_language_info(lang)
            print(f"  ‚Ä¢ {info['code'].upper()}: {info['greeting']} ({info['name']})")
    else:
        print(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{query}'")


def random_greeting(greeter: WorldGreeter) -> None:
    """–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    import random
    
    lang = random.choice(greeter.available_languages())
    info = greeter.get_language_info(lang)
    
    print(f"\nüé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:")
    print(f"üéâ {info['greeting']}")
    print(f"üìù –Ø–∑—ã–∫: {info['name']} ({info['code'].upper()})")


def show_statistics(greeter: WorldGreeter) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    languages = greeter.available_languages()
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê")
    print("-" * 30)
    print(f"üåç –í—Å–µ–≥–æ —è–∑—ã–∫–æ–≤: {len(languages)}")
    print(f"üéØ –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥: {max(languages, key=len)}")
    print(f"üéØ –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥: {min(languages, key=len)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º
    greetings = list(greeter.greetings.values())
    avg_length = sum(len(g) for g in greetings) / len(greetings)
    print(f"üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    
    longest_greeting = max(greetings, key=len)
    shortest_greeting = min(greetings, key=len)
    print(f"üìè –°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ: '{longest_greeting}'")
    print(f"üìè –°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ: '{shortest_greeting}'")


def show_help() -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    print(f"\n‚ùì –°–ü–†–ê–í–ö–ê")
    print("-" * 30)
    print("üåç –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–º–µ–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –º–∏—Ä –Ω–∞ 30 —è–∑—ã–∫–∞—Ö!")
    print("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("üéØ –ö–æ–¥—ã —è–∑—ã–∫–æ–≤ - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ ISO 639-1 –∫–æ–¥—ã")
    print("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –∫–æ–¥–∞–º, –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ —Ç–µ–∫—Å—Ç–∞–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π")
    print("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã–±–∏—Ä–∞–µ—Ç —è–∑—ã–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø—Ä–æ–µ–∫—Ç–µ")


def run_original_demo(greeter: WorldGreeter) -> None:
    """–ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...\n")
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    print("hello")
    print("Hello all")
    print()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    print("üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è!")
    print(greeter.greet('ru'))


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
    greeter = WorldGreeter()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == '--demo':
            run_original_demo(greeter)
            return
        elif sys.argv[1] == '--all':
            greeter.greet_all()
            return
        elif sys.argv[1] in greeter.available_languages():
            info = greeter.get_language_info(sys.argv[1])
            print(f"{info['greeting']} ({info['name']})")
            return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    run_original_demo(greeter)
    
    while True:
        print_menu()
        choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ").strip()
        
        if choice == '0':
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! Goodbye! Auf Wiedersehen! Au revoir!")
            break
        elif choice == '1':
            greeter.greet_all()
        elif choice == '2':
            interactive_language_selection(greeter)
        elif choice == '3':
            search_languages(greeter)
        elif choice == '4':
            random_greeting(greeter)
        elif choice == '5':
            show_statistics(greeter)
        elif choice == '6':
            show_help()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    main()
